define('dartpad_main', ['dart_sdk', 'flutter_web'], function(dart_sdk, flutter_web) {\n  'use strict';\n  const core = dart_sdk.core;\n  const ui = dart_sdk.ui;\n  const async = dart_sdk.async;\n  const dart = dart_sdk.dart;\n  const dartx = dart_sdk.dartx;\n  const app = flutter_web.src__material__app;\n  const scaffold = flutter_web.src__material__scaffold;\n  const framework = flutter_web.src__widgets__framework;\n  const gesture_detector = flutter_web.src__widgets__gesture_detector;\n  const drag_details = flutter_web.src__gestures__drag_details;\n  const container = flutter_web.src__widgets__container;\n  const basic = flutter_web.src__widgets__basic;\n  const colors = flutter_web.src__material__colors;\n  const custom_paint = flutter_web.src__rendering__custom_paint;\n  const binding = flutter_web.src__widgets__binding;\n  const bootstrap = Object.create(dart.library);\n  const main = Object.create(dart.library);\n  let DragStartDetailsTobool = () => (DragStartDetailsTobool = dart.constFn(dart.fnType(core.bool, [drag_details.DragStartDetails])))();\n  let DragEndDetailsToNull = () => (DragEndDetailsToNull = dart.constFn(dart.fnType(core.Null, [drag_details.DragEndDetails])))();\n  let VoidToNull = () => (VoidToNull = dart.constFn(dart.fnType(core.Null, [])))();\n  let DragUpdateDetailsToNull = () => (DragUpdateDetailsToNull = dart.constFn(dart.fnType(core.Null, [drag_details.DragUpdateDetails])))();\n  const CT = Object.create(null);\n  bootstrap.main = function main$() {\n    return async.async(dart.void, function* main$() {\n      yield ui.webOnlyInitializePlatform();\n      main.main();\n    });\n  };\n  main.MyApp = class MyApp extends framework.StatelessWidget {\n    build(context) {\n      return new app.MaterialApp.new({title: \"Draggable Custom Painter\", home: new scaffold.Scaffold.new({body: new main.DraggableCustomPainter.new()})});\n    }\n  };\n  (main.MyApp.new = function() {\n    main.MyApp.__proto__.new.call(this);\n    ;\n  }).prototype = main.MyApp.prototype;\n  dart.addTypeTests(main.MyApp);\n  dart.setMethodSignature(main.MyApp, () => ({\n    __proto__: dart.getMethods(main.MyApp.__proto__),\n    build: dart.fnType(framework.Widget, [framework.BuildContext])\n  }));\n  dart.setLibraryUri(main.MyApp, \"file:///tmp/dartpadRIRSZK/main.dart\");\n  main.DraggableCustomPainter = class DraggableCustomPainter extends framework.StatefulWidget {\n    createState() {\n      return new main._DraggableCustomPainterState.new();\n    }\n  };\n  (main.DraggableCustomPainter.new = function() {\n    main.DraggableCustomPainter.__proto__.new.call(this);\n    ;\n  }).prototype = main.DraggableCustomPainter.prototype;\n  dart.addTypeTests(main.DraggableCustomPainter);\n  dart.setMethodSignature(main.DraggableCustomPainter, () => ({\n    __proto__: dart.getMethods(main.DraggableCustomPainter.__proto__),\n    createState: dart.fnType(main._DraggableCustomPainterState, [])\n  }));\n  dart.setLibraryUri(main.DraggableCustomPainter, \"file:///tmp/dartpadRIRSZK/main.dart\");\n  const _dragging = dart.privateName(main, \"_dragging\");\n  const _paint = dart.privateName(main, \"_paint\");\n  const _insideRect = dart.privateName(main, \"_insideRect\");\n  main._DraggableCustomPainterState = class _DraggableCustomPainterState extends framework.State$(main.DraggableCustomPainter) {\n    [_insideRect](x, y) {\n      return dart.notNull(x) >= dart.notNull(this.xPos) && dart.notNull(x) <= dart.notNull(this.xPos) + dart.notNull(this.width) && dart.notNull(y) >= dart.notNull(this.yPos) && dart.notNull(y) <= dart.notNull(this.yPos) + dart.notNull(this.height);\n    }\n    build(context) {\n      return new gesture_detector.GestureDetector.new({onPanStart: dart.fn(details => this[_dragging] = this[_insideRect](details.globalPosition.dx, details.globalPosition.dy), DragStartDetailsTobool()), onPanEnd: dart.fn(details => {\n          this[_dragging] = false;\n        }, DragEndDetailsToNull()), onPanUpdate: dart.fn(details => {\n          if (dart.test(this[_dragging])) {\n            this.setState(dart.fn(() => {\n              this.xPos = dart.notNull(this.xPos) + dart.notNull(details.delta.dx);\n              this.yPos = dart.notNull(this.yPos) + dart.notNull(details.delta.dy);\n            }, VoidToNull()));\n          }\n        }, DragUpdateDetailsToNull()), child: new container.Container.new({child: new basic.CustomPaint.new({painter: new main.RectanglePainter.new({rect: new ui.Rect.fromLTWH(this.xPos, this.yPos, this.width, this.height), painter: this[_paint]}), child: new container.Container.new({color: colors.Colors.red})})})});\n    }\n  };\n  (main._DraggableCustomPainterState.new = function() {\n    this.xPos = 0.0;\n    this.yPos = 0.0;\n    this.width = 100.0;\n    this.height = 100.0;\n    this[_dragging] = false;\n    this[_paint] = new ui.Paint.new();\n    main._DraggableCustomPainterState.__proto__.new.call(this);\n    ;\n  }).prototype = main._DraggableCustomPainterState.prototype;\n  dart.addTypeTests(main._DraggableCustomPainterState);\n  dart.setMethodSignature(main._DraggableCustomPainterState, () => ({\n    __proto__: dart.getMethods(main._DraggableCustomPainterState.__proto__),\n    [_insideRect]: dart.fnType(core.bool, [core.double, core.double]),\n    build: dart.fnType(framework.Widget, [framework.BuildContext])\n  }));\n  dart.setLibraryUri(main._DraggableCustomPainterState, \"file:///tmp/dartpadRIRSZK/main.dart\");\n  dart.setFieldSignature(main._DraggableCustomPainterState, () => ({\n    __proto__: dart.getFields(main._DraggableCustomPainterState.__proto__),\n    xPos: dart.fieldType(core.double),\n    yPos: dart.fieldType(core.double),\n    width: dart.finalFieldType(core.double),\n    height: dart.finalFieldType(core.double),\n    [_dragging]: dart.fieldType(core.bool),\n    [_paint]: dart.finalFieldType(ui.Paint)\n  }));\n  const RectanglePainter_rect = dart.privateName(main, \"RectanglePainter.rect\");\n  const RectanglePainter_painter = dart.privateName(main, \"RectanglePainter.painter\");\n  main.RectanglePainter = class RectanglePainter extends custom_paint.CustomPainter {\n    get rect() {\n      return this[rect$];\n    }\n    set rect(value) {\n      super.rect = value;\n    }\n    get painter() {\n      return this[painter$];\n    }\n    set painter(value) {\n      super.painter = value;\n    }\n    paint(canvas, size) {\n      canvas.drawRect(this.rect, this.painter);\n    }\n    shouldRepaint(oldDelegate) {\n      custom_paint.CustomPainter._check(oldDelegate);\n      return true;\n    }\n  };\n  (main.RectanglePainter.new = function(opts) {\n    let rect = opts && 'rect' in opts ? opts.rect : null;\n    let painter = opts && 'painter' in opts ? opts.painter : null;\n    this[rect$] = rect;\n    this[painter$] = painter;\n    main.RectanglePainter.__proto__.new.call(this);\n    ;\n  }).prototype = main.RectanglePainter.prototype;\n  dart.addTypeTests(main.RectanglePainter);\n  const rect$ = RectanglePainter_rect;\n  const painter$ = RectanglePainter_painter;\n  dart.setMethodSignature(main.RectanglePainter, () => ({\n    __proto__: dart.getMethods(main.RectanglePainter.__proto__),\n    paint: dart.fnType(dart.void, [ui.Canvas, ui.Size]),\n    shouldRepaint: dart.fnType(core.bool, [core.Object])\n  }));\n  dart.setLibraryUri(main.RectanglePainter, \"file:///tmp/dartpadRIRSZK/main.dart\");\n  dart.setFieldSignature(main.RectanglePainter, () => ({\n    __proto__: dart.getFields(main.RectanglePainter.__proto__),\n    rect: dart.finalFieldType(ui.Rect),\n    painter: dart.finalFieldType(ui.Paint)\n  }));\n  main.main = function main$0() {\n    return binding.runApp(new main.MyApp.new());\n  };\n  dart.trackLibraries(\"dartpad_main\", {\n    \"file:///tmp/dartpadRIRSZK/bootstrap.dart\": bootstrap,\n    \"file:///tmp/dartpadRIRSZK/main.dart\": main\n  }, {\n  }, null);\n  // Exports:\n  return {\n    tmp__dartpadRIRSZK__bootstrap: bootstrap,\n    tmp__dartpadRIRSZK__main: main\n  };\n});\n\n//# sourceMappingURL=main.dart.js.map\n